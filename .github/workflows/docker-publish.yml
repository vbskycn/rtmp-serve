name: Docker Build and Publish

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag (leave empty to use config.json version or "latest")'
        required: false
        type: string

env:
  REGISTRY: docker.io
  DOCKER_HUB_USERNAME: zhoujie218
  IMAGE_NAME: rtmp-serve

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from config
        id: get_version
        run: |
          CONFIG_VERSION=$(grep -o '"version": *"[^"]*"' config/config.json | cut -d'"' -f4)
          echo "config_version=$CONFIG_VERSION" >> $GITHUB_OUTPUT

      - name: Set version
        id: set_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ github.event.inputs.version_tag }}" ]; then
              echo "version=${{ github.event.inputs.version_tag }}" >> $GITHUB_OUTPUT
            else
              echo "version=${{ steps.get_version.outputs.config_version }}" >> $GITHUB_OUTPUT
            fi
          else
            echo "version=${{ steps.get_version.outputs.config_version }}" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            VERSION=${{ steps.set_version.outputs.version }}
          tags: |
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.set_version.outputs.version }}
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Build result
        run: |
          echo "Image built and pushed:"
          echo "Repository: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}"
          echo "Version tag: ${{ steps.set_version.outputs.version }}"
          echo "Latest tag: latest" 